' PeakLogix Proprietary and Confidential
' Copyright Peaklogix 2022

Imports System.Data.SqlClient
Imports System.IO

Public Class Certificates
    ''' <summary>
    ''' Generates a client certificate
    ''' </summary>
    ''' <param name="certName"></param>
    ''' <param name="friendlyName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function generateCertificate(certName As String, friendlyName As String) As String
        If Not checkPCName(friendlyName) Then
            Try
                Dim p As Process = New Process()
                Dim pi As ProcessStartInfo = New ProcessStartInfo()
                pi.Arguments = certName & " " & friendlyName
                pi.FileName = "C:\Programdata\Scotttech\Certs\createClientcert.bat"
                pi.UseShellExecute = False
                pi.RedirectStandardOutput = True
                pi.RedirectStandardError = True
                p.StartInfo = pi
                p.Start()
                Dim output = p.StandardOutput.ReadToEnd()
                p.WaitForExit()
                verifyClientCertificate("C:\ProgramData\Scotttech\Certs\Issued\client" & certName & "cert.pfx")
                addValidWorkstation(friendlyName, readClientSerial("C:\Programdata\Scotttech\Certs\Issued\Client" & friendlyName & ".ser"))
            Catch ex As Exception
                Return ex.Message
            End Try
            Return "Success"
        Else
            Return "EXISTS"
        End If
    End Function

    ''' <summary>
    ''' Handles creating a new Android Workstation as Certificate support still varies
    ''' </summary>
    ''' <param name="friendlyName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function generateAndroidIdent(friendlyName As String) As String
        If Not checkPCName(friendlyName) Then
            addValidWorkstation(friendlyName, friendlyName)
            Return "Success"
        Else
            Return "EXISTS"
        End If
    End Function


    ''' <summary>
    ''' Polls until License has been generated by the Batch FIle
    ''' </summary>
    ''' <param name="filePath"></param>
    ''' <remarks></remarks>
    Public Shared Sub verifyClientCertificate(filePath As String)
        'While (Not System.IO.File.Exists(filePath))
        '    System.Threading.Thread.Sleep(500)
        'End While
    End Sub

    ''' <summary>
    ''' Gets the WSID representation of the client certificate serial number
    ''' </summary>
    ''' <param name="certificate"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function resolveWSID(certificate As HttpClientCertificate) As String
        Return certificate.SerialNumber.Replace("-", "")
    End Function

    ''' <summary>
    ''' Adds a valid workstation to the Valid Workstations table
    ''' </summary>
    ''' <param name="PCName"></param>
    ''' <param name="WSID"></param>
    ''' <remarks></remarks>
    Private Shared Sub addValidWorkstation(PCName As String, WSID As String)
        Try
            RunActionSP("insValidWorkstation", "CONFIG", {{"@PCName", PCName, strVar}, {"@WSID", WSID, strVar}})
        Catch ex As Exception
            Debug.WriteLine(ex.Message)
            insertErrorMessages("GenerateCert", "addValidWorkstation", ex.Message, "", "")
        End Try

    End Sub

    ''' <summary>
    ''' Checks if PC Name has already been registered with the application
    ''' </summary>
    ''' <param name="PCName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Shared Function checkPCName(PCName As String) As Boolean
        Dim Datareader As SqlDataReader = Nothing
        Try
            Datareader = RunSPArray("selValidWSPCName", "CONFIG", {{"@PCName", PCName, strVar}})
            If Datareader.HasRows Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Debug.WriteLine(ex.Message)
            insertErrorMessages("GenerateCert", "checkPCName", ex.Message, "", "")
        Finally
            If Not IsNothing(Datareader) Then
                Datareader.Dispose()
            End If
        End Try

        Return True
    End Function

    ''' <summary>
    ''' Reads the client certificate serial number .ser file all the way through and prepends any 0s needed
    ''' </summary>
    ''' <param name="fileName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Shared Function readClientSerial(fileName As String) As String
        Dim serial As String
        'Reads Serial From file
        Using sr As New StreamReader(fileName)
            serial = sr.ReadToEnd
        End Using

        'Trims next line character
        serial = serial.Substring(0, serial.Length - 1)

        'Prepends 0's if needed
        While serial.Length >= 16 And serial.Length < 18
            serial = "0" & serial
        End While
        Return serial
    End Function

    ''' <summary>
    ''' Returns the User-Friendly PC name 
    ''' </summary>
    ''' <param name="WSID">WSID associated with PC Name</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function getPCName(WSID As String) As String
        Dim Datareader As SqlDataReader = Nothing
        Try
            Datareader = RunSPArray("selPCNameWSID", "CONFIG", {{"@WSID", WSID, strVar}})
            If Datareader.HasRows Then
                Datareader.Read()
                Return Datareader(0)
            End If
        Catch ex As Exception
            Debug.WriteLine(ex.Message)
            insertErrorMessages("Certificates", "getPCName", ex.Message, "", "")
        Finally
            If Not IsNothing(Datareader) Then
                Datareader.Dispose()
            End If
        End Try
        Return ""
    End Function


End Class
